/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Solenoid;
import com.ctre.phoenix.sensors.*;

import com.analog.adis16470.frc.ADIS16470_IMU;
import com.ctre.phoenix.motorcontrol.can.*;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  public int irbeam1tripped = 0;
  public int irbeam2tripped = 0;
  public int irbeam3tripped = 0;
  public int irbeam4tripped = 0;
  public int irbeam5tripped = 0;
  
  // motors
  private WPI_VictorSPX Intake3 = new WPI_VictorSPX(4);
  private WPI_VictorSPX Intake2 = new WPI_VictorSPX(2);
  private WPI_VictorSPX Intake4 = new WPI_VictorSPX(3);
   private VictorSP Intake1 = new VictorSP(1);
    private VictorSP Intake5 = new VictorSP(2); 
  private WPI_TalonSRX RightShooter = new WPI_TalonSRX(0);
  private VictorSP LeftShooter = new VictorSP(0); 

 // Drive
   private  WPI_TalonSRX FrontRight = new WPI_TalonSRX(2);
  private  WPI_TalonSRX  BackRight = new  WPI_TalonSRX(3);
 private   WPI_TalonSRX  FrontLeft = new  WPI_TalonSRX(4);
 private   WPI_TalonSRX BackLeft = new  WPI_TalonSRX(1); 
 // XBOX controller
 private  GenericHID controller = new Joystick(0);
 // solenoids
 private Solenoid out = new Solenoid(10, 1);
 private Solenoid in = new Solenoid(10, 0);
 // ir beam sensors
 private DigitalInput virtualirbeam1 = new DigitalInput(0);
 private DigitalInput virtualirbeam2 = new DigitalInput(1);
 private DigitalInput virtualirbeam3 = new DigitalInput(2);
 private DigitalInput virtualirbeam4 = new DigitalInput(3);
 private DigitalInput virtualirbeam5 = new DigitalInput(4);
private DigitalInput Roller = new DigitalInput(5);
 private final ADIS16470_IMU Gyro = new ADIS16470_IMU();
 
 double kP = 1;
  /**
   * 
   * This function is run when the robot is first started up and should be used
   * for any initialization code.
   */
  @Override
  public void robotInit() {
    // Starts USB camera
  CameraServer.getInstance().startAutomaticCapture();
  irbeam1tripped = 0;
  irbeam2tripped = 0;
  irbeam3tripped = 0;
  irbeam4tripped = 0;
  irbeam5tripped = 0;


  }

  @Override
  public void autonomousInit() {

    
   /* while (Gyro.getAngle() != 0) {
      if (Gyro.getAngle() > 0){
        FrontLeft.set(1);
        BackLeft.set(1);
        FrontRight.set(-1);
        BackLeft.set(-1);
        }
        else if (Gyro.getAngle() < 0) {
        FrontLeft.set(-1);
        BackLeft.set(-1);
        FrontRight.set(1);
        BackLeft.set(1);
        }
        else {
          FrontLeft.set(0);
          BackLeft.set(0);
          FrontRight.set(0);
          BackLeft.set(0); 
        }
        FrontLeft.set(0);
        BackLeft.set(0);
        FrontRight.set(0);
        BackLeft.set(0); 

    }*/
  }

  @Override
  public void autonomousPeriodic() {
    /*double error = -Gyro.getRate();
    
    
    FrontLeft.set(.5 + kP * error);
    BackLeft.set(.5 + kP * error);
    FrontRight.set(.5 - kP * error);
    BackRight.set(.5 - kP * error);
    SmartDashboard.putNumber("Right Side", .5 - kP * error);
    SmartDashboard.putNumber("Left Side", .5 + kP * error);
    SmartDashboard.putNumber("Gyro Rate", Gyro.getRate());
    SmartDashboard.putNumber("Gyro Angle", Gyro.getAngle());*/
    
  }

  @Override
  public void teleopInit() {
  irbeam1tripped = 0;
  irbeam2tripped = 0;
  irbeam3tripped = 0;
  irbeam4tripped = 0;
  irbeam5tripped = 0;
  }

  @Override
  public void teleopPeriodic() {
    // checks A and B buttons then sets off solenoids correspondin gto the button
    if (controller.getRawButton(1)){
    /*out.set(true);
    out.setPulseDuration(0.1);
    out.startPulse();*/
    Intake1.set(-.25);
    Intake2.set(-.25);
    Intake3.set(-.25);
    Intake4.set(-.25);
    Intake5.set(.25);
    LeftShooter.set(1);
    RightShooter.set(-1);
    }
    else if (controller.getRawButton(2)) {
    /*in.set(true);
    in.setPulseDuration(0.1);
    in.startPulse(); */
    Intake1.set(-.5);
    Intake2.set(-.5);
    Intake3.set(-.5);
    Intake4.set(-.5);
   Intake5.set(.5);
    LeftShooter.set(1);
    RightShooter.set(-1);
    }
    else if (controller.getRawButton(3)){
      /*FrontLeft.set(0);
      FrontRight.set(0);
      BackRight.set(0);
      irbeam1tripped = 0;
      irbeam2tripped = 0;
      irbeam3tripped = 0;
      irbeam4tripped = 0;
      irbeam5tripped = 0; */
      Intake1.set(-.75);
      Intake2.set(-.75);
      Intake3.set(-.75);
      Intake4.set(-.75);
      Intake5.set(.75);
      LeftShooter.set(1);
      RightShooter.set(-1);

    }
    else if (controller.getRawButton(4)) {
      Intake1.set(-0.5);
      Intake2.set(-1);
      Intake3.set(-1);
      Intake4.set(-1);
      Intake5.set(1);
      LeftShooter.set(1);
      RightShooter.set(-1);
    
    }
    else if (controller.getRawButton(5)){
     
      LeftShooter.set(1);
      RightShooter.set(-1);
    }
    else if (controller.getRawButton(6)){
      Intake1.set(-.5);
      Intake2.set(-.5);
      Intake3.set(-.5);
      Intake4.set(-.5);
      Intake5.set(.5);
      LeftShooter.set(0);
      RightShooter.set(0);
    }
      
    else {
      out.set(false);
      in.set(false);
      Intake1.set(0);
      Intake2.set(0);
      Intake3.set(0);
      Intake4.set(0);
      Intake5.set(0);
      LeftShooter.set(0);
      RightShooter.set(0);
    }


    double left = controller.getRawAxis(1) * -0.6;
    double right = -controller.getRawAxis(5) * 0.6;
    
    SpeedControllerGroup Left = new SpeedControllerGroup(FrontLeft, BackLeft);
    SpeedControllerGroup Right = new SpeedControllerGroup(FrontRight, BackRight);
    // testing ir beam logic
    if (!virtualirbeam1.get()){
       irbeam1tripped = 1;
       System.out.println("DIO 1 input detected");
    }
    else if (!virtualirbeam2.get() & irbeam1tripped == 1){
      irbeam2tripped = 1;
      System.out.println("DIO 2 input detected");
    }
    else if (!virtualirbeam3.get() & irbeam2tripped == 1){
      irbeam3tripped = 1;
      System.out.println("DIO 3 input detected");
    }
    else if (!virtualirbeam4.get() & irbeam3tripped == 1){
      irbeam4tripped = 1;
      System.out.println("DIO 4 input detected");
    }
    else if (!virtualirbeam5.get() & irbeam4tripped == 1){
      irbeam5tripped = 1;
      System.out.println("DIO 5 input detected");
    }
    else {
      return;
    }

    

    // checks if beam is tripped
    /*if (irbeam1tripped == 1) {
      FrontLeft.set(1);
      if (irbeam2tripped == 1){
         FrontLeft.set(1);
         FrontRight.set(1);
        if (irbeam3tripped == 1){
          FrontLeft.set(1);
          FrontRight.set(1);
          BackRight.set(1);
          if (irbeam4tripped == 1){
            FrontLeft.set(1);
            FrontRight.set(1);
            BackRight.set(1);
            BackLeft.set(1);
            if(irbeam5tripped == 1) {
              FrontLeft.set(1);
              FrontRight.set(1);
              BackRight.set(1);
              BackLeft.set(1);
          // dummy motor.set(1)

            }
            else {
              return;
            }
          }
          else {
            return;
          }
         }
         else {
          return;
         }
       }
       else {
        return;
       }
    }
    else {
      return;
    } */









    

    /*if (!DIO_0.get()){
      Left.set(1);
      Right.set(-1);
      Left.close();
      Right.close();
      System.out.println("DIO 0 input detected");
    }
    else if (!DIO_1.get()){
      Left.set(1);
      Right.set(-1);
      Left.close();
      Right.close();
      System.out.println("DIO 1 input detected");
      
    }
    else if (!DIO_2.get()){
      Right.set(1);
      Left.set(1);
    }
    else {
      Left.set(0);
      Right.set(0);*/
    
    
    
    

    Left.set(left);
    Left.set(left);
    Right.set(-right);
    Right.set(-right);
    Left.close();
    Right.close();}


  @Override
  public void testInit() {
  }

  @Override
  public void testPeriodic() {
  }

}
